[{"C:\\Users\\Jin Sunwoo\\Desktop\\practicehtml\\Puzzle\\my-puzzle\\src\\index.js":"1","C:\\Users\\Jin Sunwoo\\Desktop\\practicehtml\\Puzzle\\my-puzzle\\src\\reportWebVitals.js":"2","C:\\Users\\Jin Sunwoo\\Desktop\\practicehtml\\Puzzle\\my-puzzle\\src\\App.js":"3"},{"size":500,"mtime":1640146044860,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1640146045038,"results":"6","hashOfConfig":"5"},{"size":8546,"mtime":1641003368086,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1l202tm",{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"C:\\Users\\Jin Sunwoo\\Desktop\\practicehtml\\Puzzle\\my-puzzle\\src\\index.js",[],"C:\\Users\\Jin Sunwoo\\Desktop\\practicehtml\\Puzzle\\my-puzzle\\src\\reportWebVitals.js",[],"C:\\Users\\Jin Sunwoo\\Desktop\\practicehtml\\Puzzle\\my-puzzle\\src\\App.js",["15","16","17","18","19","20","21","22","23"],"import './App.css';\nimport {useState, useEffect} from 'react';\nimport bluePiece from \"./images/blue.png\";\nimport orangePiece from \"./images/orange.png\";\nimport redPiece from \"./images/red.png\";\nimport greenPiece from \"./images/green.png\";\n\nconst ogPieces = [\n  {\n    key: 0, type: orangePiece, orientation: 1, location: \"shuffled\"\n  },\n  {\n    key: 1, type: orangePiece, orientation: 1, location: \"shuffled\"\n  },\n  {\n    key: 2, type: orangePiece, orientation: 1, location: \"shuffled\"\n  },\n  {\n    key: 3, type: orangePiece, orientation: 1, location: \"shuffled\"\n  },\n  {\n    key: 4, type: bluePiece, orientation: 1, location: \"shuffled\"\n  },\n  {\n    key: 5, type: bluePiece, orientation: 1, location: \"shuffled\"\n  },\n  {\n    key: 6, type: greenPiece, orientation: 1, location: \"shuffled\"\n  },\n  {\n    key: 7, type: greenPiece, orientation: 1, location: \"shuffled\"\n  },\n  {\n    key: 8, type: redPiece, orientation: 1, location: \"shuffled\"\n  }\n]\n\nfunction App() {\n  const [shuffled, setShuffled] = useState(ogPieces);\n  const [board, setBoard] = useState([0,0,0,0,0,0,0,0,0]);\n  console.log(\"Shuffled: \", shuffled);\n\n  const [clickedPiece, setClickedPiece] = useState({key: -1});\n  \n  const clickPiece = (piece, event) => {\n    console.log(\"sender is :\", event.target);\n    if (piece.location === \"shuffled\") {\n      console.log(\"clickPiece\");\n      if (clickedPiece.key === piece.key) {\n        setClickedPiece({key: -1});\n      } else {\n        setClickedPiece(piece);\n      }\n    }\n  }\n\n  const doubleClickPiece = (event) => {\n    console.log(\"doubleclick: \", event.currentTarget);\n    console.log(event.currentTarget.id);\n    let shuffledTemp = shuffled;\n    let key = event.currentTarget.id;\n    let pieceIndex = shuffledTemp.findIndex(piece => piece.key == key);\n\n    if (shuffledTemp[pieceIndex].orientation < 4) {\n      shuffledTemp[pieceIndex].orientation++;\n    } else {\n      shuffledTemp[pieceIndex].orientation = 1;\n    }\n    setShuffled(shuffledTemp);\n  }\n\n  const clickBoard = (event) => {\n    console.log(\"clickBoard\");\n    console.log(\"This spot is \", event.currentTarget.getAttribute(\"id\"));\n    let id = event.currentTarget.getAttribute(\"id\")\n    let hasPiece = event.currentTarget.getAttribute(\"has-piece\");\n    if (!(clickedPiece.key === -1)) {\n      if (hasPiece === \"No\") {\n        event.currentTarget.setAttribute(\"has-piece\", \"Yes\");\n\n        // Updating shuffled\n        console.log(\"key is \", shuffled.findIndex(p => p.key == clickedPiece.key));\n        let index = shuffled.findIndex(p => p.key == clickedPiece.key);\n        shuffled.splice(index, 1);\n        setShuffled(shuffled);\n\n        // Updating the board\n        clickedPiece.location = \"board\";\n        board[id - 1] = clickedPiece;\n        setBoard(board);\n        console.log(board);\n\n        // reseting clicked piece\n        setClickedPiece({key: -1});\n      } else {\n        console.log(\"POOP\");\n      }\n    } else {\n      if (hasPiece === \"Yes\") {\n        event.currentTarget.setAttribute(\"has-piece\", \"No\");\n\n        board[id - 1].location = \"shuffled\";\n        shuffled.push(board[id -1]);\n        setShuffled(shuffled);\n\n        board[id - 1] = 0;\n        setBoard(board);\n\n        setClickedPiece({key: -1});\n      }\n    }\n  }\n  \n  useEffect(() => {\n    console.log(\"called useeffect\");\n  });\n  \n  const fillRow = (spot, i, j) => {\n    if (spot === 0) {\n      return (\n        <td\n          key={(i+j)}\n          id={(i+j)}\n          has-piece=\"No\"\n          onClick={(e) => {clickBoard(e)}}\n        >\n          {i+j}\n        </td>\n      )\n    } else {\n      return (\n        <td\n            key={(i+j)}\n            id={(i+j)}\n            has-piece=\"No\"\n            onClick={(e) => {clickBoard(e)}}\n        >\n          <Piece \n            pieceDict={spot}\n            clickPiece={clickPiece} \n            clickBoard={clickBoard}\n            clicked={false}\n            doubleClickPiece={doubleClickPiece}\n          />\n        </td>\n      )\n    }      \n  }\n\n  return (\n    <>\n      <div>\n        <div className='pieces'>\n          {shuffled.map((piece) => {\n              return (\n                <Piece \n                  pieceDict={piece} \n                  clickPiece={clickPiece} \n                  clickBoard={clickBoard}\n                  clicked={(piece.key === clickedPiece.key)}\n                  doubleClickPiece={doubleClickPiece}\n                />\n              )\n            }\n          )}\n        </div>\n        <table>\n          <tbody>\n            <tr key=\"1\">\n              {board.slice(0, 3).map((spot, i) => {\n                return fillRow(spot, i, 1);\n              })}\n            </tr>\n            <tr key=\"2\">\n              {board.slice(3, 6).map((spot, i) => {\n                return fillRow(spot, i, 4);\n              })}\n            </tr>\n            <tr key=\"3\">\n              {board.slice(6, 9).map((spot, i) => {\n                return fillRow(spot, i, 7);\n              })}\n            </tr>\n          </tbody>\n\n      </table>\n      <button onClick={() => {console.log(shuffled);}}>Pieces</button>\n      <button onClick={() => {console.log(board, \"\\n\", document.querySelector(\"tbody\"));}}>Board</button>\n      <button onClick={() => {console.log(clickedPiece)}}>ClickedPiece</button>\n\n      </div>\n    </>\n  );\n}\n\nconst Piece = (props) => {\n  const {pieceDict, clickPiece, clickBoardPiece, clicked, doubleClickPiece} = props;\n  switch(pieceDict.orientation) {\n    case 1:\n      if (clicked) {\n        return (\n          <article \n            className=\"Clicked\" \n            key={pieceDict.key}\n            id={pieceDict.key}\n            onClick={(e) => {clickPiece(pieceDict, e)}} \n            onDoubleClick={(e)=>{doubleClickPiece(e)}}\n          >\n            <img src={pieceDict.type} alt=\"\" style={{transform: \"rotate(0deg)\"}}/>\n          </article>\n          )\n      } else {\n        return (\n          <article \n            key={pieceDict.key}\n            id={pieceDict.key}\n            onClick={(e) => {clickPiece(pieceDict, e)}}\n            onDoubleClick={(e)=>{doubleClickPiece(e)}}\n          >\n            <img src={pieceDict.type} alt=\"\" style={{transform: \"rotate(0deg)\"}}/>\n          </article>\n        )\n      }\n      break;\n    case 2:\n      if (clicked) {\n        return (\n          <article \n            className=\"Clicked\" \n            key={pieceDict.key}\n            id={pieceDict.key}\n            onClick={(e) => {clickPiece(pieceDict, e)}} \n            onDoubleClick={(e)=>{doubleClickPiece(e)}}\n          >\n            <img src={pieceDict.type} alt=\"\" style={{transform: \"rotate(90deg)\"}}/>\n          </article>\n          )\n      } else {\n        return (\n          <article \n            key={pieceDict.key}\n            id={pieceDict.key}\n            onClick={(e) => {clickPiece(pieceDict, e)}}\n            onDoubleClick={(e)=>{doubleClickPiece(e)}}\n          >\n            <img src={pieceDict.type} alt=\"\" style={{transform: \"rotate(90deg)\"}}/>\n          </article>\n        )\n      }\n      break;\n    case 3:\n      if (clicked) {\n        return (\n          <article \n            className=\"Clicked\" \n            key={pieceDict.key}\n            id={pieceDict.key}\n            onClick={(e) => {clickPiece(pieceDict, e)}} \n            onDoubleClick={(e)=>{doubleClickPiece(e)}}\n          >\n            <img src={pieceDict.type} alt=\"\" style={{transform: \"rotate(180deg)\"}}/>\n          </article>\n          )\n      } else {\n        return (\n          <article \n            key={pieceDict.key}\n            id={pieceDict.key}\n            onClick={(e) => {clickPiece(pieceDict, e)}}\n            onDoubleClick={(e)=>{doubleClickPiece(e)}}\n          >\n            <img src={pieceDict.type} alt=\"\" style={{transform: \"rotate(180deg)\"}}/>\n          </article>\n        )\n      }\n      break;\n    case 4:\n      if (clicked) {\n        return (\n          <article \n            className=\"Clicked\" \n            key={pieceDict.key}\n            id={pieceDict.key}\n            onClick={(e) => {clickPiece(pieceDict, e)}} \n            onDoubleClick={(e)=>{doubleClickPiece(e)}}\n          >\n            <img src={pieceDict.type} alt=\"\" style={{transform: \"rotate(270deg)\"}}/>\n          </article>\n          )\n      } else {\n        return (\n          <article \n            key={pieceDict.key}\n            id={pieceDict.key}\n            onClick={(e) => {clickPiece(pieceDict, e)}}\n            onDoubleClick={(e)=>{doubleClickPiece(e)}}\n          >\n            <img src={pieceDict.type} alt=\"\" style={{transform: \"rotate(270deg)\"}}/>\n          </article>\n        )\n      }\n      break;\n  }\n  \n  \n}\n\nexport default App;\n",{"ruleId":"24","severity":1,"message":"25","line":62,"column":64,"nodeType":"26","messageId":"27","endLine":62,"endColumn":66},{"ruleId":"24","severity":1,"message":"25","line":82,"column":62,"nodeType":"26","messageId":"27","endLine":82,"endColumn":64},{"ruleId":"24","severity":1,"message":"25","line":83,"column":51,"nodeType":"26","messageId":"27","endLine":83,"endColumn":53},{"ruleId":"28","severity":1,"message":"29","line":197,"column":33,"nodeType":"30","messageId":"31","endLine":197,"endColumn":48},{"ruleId":"32","severity":1,"message":"33","line":198,"column":3,"nodeType":"34","messageId":"35","endLine":303,"endColumn":4},{"ruleId":"36","severity":1,"message":"37","line":224,"column":7,"nodeType":"38","messageId":"39","endLine":224,"endColumn":13},{"ruleId":"36","severity":1,"message":"37","line":250,"column":7,"nodeType":"38","messageId":"39","endLine":250,"endColumn":13},{"ruleId":"36","severity":1,"message":"37","line":276,"column":7,"nodeType":"38","messageId":"39","endLine":276,"endColumn":13},{"ruleId":"36","severity":1,"message":"37","line":302,"column":7,"nodeType":"38","messageId":"39","endLine":302,"endColumn":13},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'clickBoardPiece' is assigned a value but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unreachable","Unreachable code.","BreakStatement","unreachableCode"]